--- TO DISCUSS

  - how to handle the setters and getters in a concurrency situation

--- BACKLOG

  - LECTURING
     - microservices
     - ... whatever

  - UNPRIORITIZED
  performing Code review
  Errors and Exceptions processing
  Adding viewports to every entity:
    - Order
    - Item
    - OrderItem
  Add active UI elements

  - PRIORITIZED
    - dockers
    - versioning
    - To realize flow: new order with items -> reserve items (with checks) -> confirm order


---- SPRINT

  TODO
    - Install Docker, rise PostgreSQL, switch between H2 and postgres, plug FlyWay, realize first version of DB, populate DB with testing data


---- DONE
- 24.05.2022
    - Make an endpoint which create order with required quantity of items. Should happens write off from the storehouse.
        If there is no enough of items should return error.
    - Try postman

- 09.05.22
  - fasten a Hibernate's logger, which logs requests. (Will need properties with formatting)
  - Make an endpoint which returns all items and stored quantity (Will need: a new DTO, a new method in the service)
  - SQL introducing

- 15.04.22
  project should start and bug fixing:
    1. OneToOne connection between CommodityItem And Item
        1.1 Remove data duplication ib fields "title" & "description" of Items & CommodityItems
        1.2 Data generator should generate Items nor ComodityItems
    2. Add amounts of items in order entity (@anyToMany annotation)

- 11.04.22
Backlog grooming

- 10.04.22
Make unit tests for services and controllers
Correct current Entities and add new ones (Storehouse and maybe OrderItem)
Storehouse repository
Make integration tests for two endpoints (+ package)
Add POST endpoint
Add validation
Add DTO with mapstruct
    DTO package
    And mappers
Make endpoint "GetUserByName"
Add ResponseEntity.ok() in controller
Design and make relationships (associations) between entities
Add swagger